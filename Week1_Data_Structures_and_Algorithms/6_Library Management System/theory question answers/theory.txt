1.Explain linear search and binary search algorithms.

--Linear Search works by sequentially checking each element in a list, starting from the beginning until it finds the desired item or reaches the end of the list. 
The primary advantage of linear search is its simplicity.It works on any list, sorted or unsorted. However, this method can be inefficient for large datasets because it may need to examine every single element in the worst case.

Binary Search is a much more efficient searching algorithm that applies the principle of divide and conquer. It only works on sorted lists. The process begins by checking the middle element of the list. If that element matches the target value, the search is complete. If the target is less than the middle element, the algorithm repeats the process on the left half of the list otherwise, it searches the right half. This continues, halving the search space at each step until the element is found or the search space is empty.

4.a. Compare the time complexity of linear and binary search.

--Linear Search has a time complexity of O(n), where n is the number of elements in the list. In the worst-case scenario, every item must be checked, which makes it inefficient for large collections.

Binary Search has a time complexity of O(log n). Because the search space is cut in half at each step. This makes binary search much faster than linear search, especially as the dataset grows.

4.b.Discuss when to use each algorithm based on the data set size and order.

-- We should use Linear Search when the list is unsorted and the dataset is small.

We should use Binary Search when the dataset is large and the list is already sorted and when we require fast repeated searches.